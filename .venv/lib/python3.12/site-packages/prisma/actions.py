# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class TaskActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Task]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Task.prisma().query_raw(
            'SELECT * FROM Task WHERE id = $1',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Task
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Task.prisma().query_first(
            'SELECT * FROM Task WHERE title = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.TaskCreateInput,
        include: Optional[types.TaskInclude] = None
    ) -> _PrismaModelT:
        """Create a new Task record.

        Parameters
        ----------
        data
            Task record data
        include
            Specifies which relations should be loaded on the returned Task model

        Returns
        -------
        prisma.models.Task
            The created Task record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Task record from just the required fields
        task = await Task.prisma().create(
            data={
                # data to create a Task record
                'title': 'ggciceaie',
                'user_id': 'bbehjachib',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.TaskCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Task records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Task record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Task.prisma().create_many(
            data=[
                {
                    # data to create a Task record
                    'title': 'cadfabfehe',
                    'user_id': 'dgiiaaijj',
                },
                {
                    # data to create a Task record
                    'title': 'bfaiacjjfc',
                    'user_id': 'eigcfgbif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.TaskWhereUniqueInput,
        include: Optional[types.TaskInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Task record.

        Parameters
        ----------
        where
            Task filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Task model

        Returns
        -------
        prisma.models.Task
            The deleted Task record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        task = await Task.prisma().delete(
            where={
                'id': 'bagcfbhiig',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.TaskWhereUniqueInput,
        include: Optional[types.TaskInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Task record.

        Parameters
        ----------
        where
            Task filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Task model

        Returns
        -------
        prisma.models.Task
            The found Task record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        task = await Task.prisma().find_unique(
            where={
                'id': 'cghideieh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.TaskWhereUniqueInput,
        include: Optional[types.TaskInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Task record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Task filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Task model

        Returns
        -------
        prisma.models.Task
            The found Task record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        task = await Task.prisma().find_unique_or_raise(
            where={
                'id': 'biabhbdai',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TaskWhereInput] = None,
        cursor: Optional[types.TaskWhereUniqueInput] = None,
        include: Optional[types.TaskInclude] = None,
        order: Optional[Union[types.TaskOrderByInput, List[types.TaskOrderByInput]]] = None,
        distinct: Optional[List[types.TaskScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Task records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Task records returned
        skip
            Ignore the first N results
        where
            Task filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Task model
        order
            Order the returned Task records by any field
        distinct
            Filter Task records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Task]
            The list of all Task records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Task records
        tasks = await Task.prisma().find_many(take=10)

        # find the first 5 Task records ordered by the description field
        tasks = await Task.prisma().find_many(
            take=5,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TaskWhereInput] = None,
        cursor: Optional[types.TaskWhereUniqueInput] = None,
        include: Optional[types.TaskInclude] = None,
        order: Optional[Union[types.TaskOrderByInput, List[types.TaskOrderByInput]]] = None,
        distinct: Optional[List[types.TaskScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Task record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Task filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Task model
        order
            Order the returned Task records by any field
        distinct
            Filter Task records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Task
            The first Task record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Task record ordered by the due_date field
        task = await Task.prisma().find_first(
            skip=1,
            order={
                'due_date': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TaskWhereInput] = None,
        cursor: Optional[types.TaskWhereUniqueInput] = None,
        include: Optional[types.TaskInclude] = None,
        order: Optional[Union[types.TaskOrderByInput, List[types.TaskOrderByInput]]] = None,
        distinct: Optional[List[types.TaskScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Task record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Task filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Task model
        order
            Order the returned Task records by any field
        distinct
            Filter Task records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Task
            The first Task record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Task record ordered by the priority field
        task = await Task.prisma().find_first_or_raise(
            skip=1,
            order={
                'priority': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.TaskUpdateInput,
        where: types.TaskWhereUniqueInput,
        include: Optional[types.TaskInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Task record.

        Parameters
        ----------
        data
            Task record data specifying what to update
        where
            Task filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Task model

        Returns
        -------
        prisma.models.Task
            The updated Task record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        task = await Task.prisma().update(
            where={
                'id': 'idghgaicb',
            },
            data={
                # data to update the Task record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.TaskWhereUniqueInput,
        data: types.TaskUpsertInput,
        include: Optional[types.TaskInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Task filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Task model

        Returns
        -------
        prisma.models.Task
            The created or updated Task record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        task = await Task.prisma().upsert(
            where={
                'id': 'fjfddhigg',
            },
            data={
                'create': {
                    'id': 'fjfddhigg',
                    'title': 'bfaiacjjfc',
                    'user_id': 'eigcfgbif',
                },
                'update': {
                    'title': 'bfaiacjjfc',
                    'user_id': 'eigcfgbif',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.TaskUpdateManyMutationInput,
        where: types.TaskWhereInput,
    ) -> int:
        """Update multiple Task records

        Parameters
        ----------
        data
            Task data to update the selected Task records to
        where
            Filter to select the Task records to update

        Returns
        -------
        int
            The total number of Task records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Task records
        total = await Task.prisma().update_many(
            data={
                'status': 'hjaecfifb'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TaskWhereInput] = None,
        cursor: Optional[types.TaskWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Task records present in the database

        Parameters
        ----------
        select
            Select the Task fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Task filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TaskCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Task.prisma().count()

        # results: prisma.types.TaskCountAggregateOutput
        results = await Task.prisma().count(
            select={
                '_all': True,
                'user_id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.TaskCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TaskWhereInput] = None,
        cursor: Optional[types.TaskWhereUniqueInput] = None,
    ) -> types.TaskCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.TaskCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TaskWhereInput] = None,
        cursor: Optional[types.TaskWhereUniqueInput] = None,
    ) -> Union[int, types.TaskCountAggregateOutput]:
        """Count the number of Task records present in the database

        Parameters
        ----------
        select
            Select the Task fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Task filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TaskCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Task.prisma().count()

        # results: prisma.types.TaskCountAggregateOutput
        results = await Task.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.TaskCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.TaskWhereInput] = None
    ) -> int:
        """Delete multiple Task records.

        Parameters
        ----------
        where
            Optional Task filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Task records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Task records
        total = await Task.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.TaskScalarFieldKeys'],
        *,
        where: Optional['types.TaskWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.TaskAvgAggregateInput'] = None,
        sum: Optional['types.TaskSumAggregateInput'] = None,
        min: Optional['types.TaskMinAggregateInput'] = None,
        max: Optional['types.TaskMaxAggregateInput'] = None,
        having: Optional['types.TaskScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.TaskCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.TaskScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.TaskScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.TaskGroupByOutput']:
        """Group Task records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Task fields to group records by
        where
            Task filter to select records
        take
            Limit the maximum number of Task records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.TaskGroupByOutput]
            A list of dictionaries representing the Task record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Task records by updated_at values
        # and count how many records are in each group
        results = await Task.prisma().group_by(
            ['updated_at'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class EventActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Event]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Event.prisma().query_raw(
            'SELECT * FROM Event WHERE id = $1',
            'cbbbjbfcii',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Event
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Event.prisma().query_first(
            'SELECT * FROM Event WHERE title = $1',
            'bbejhfidcb',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.EventCreateInput,
        include: Optional[types.EventInclude] = None
    ) -> _PrismaModelT:
        """Create a new Event record.

        Parameters
        ----------
        data
            Event record data
        include
            Specifies which relations should be loaded on the returned Event model

        Returns
        -------
        prisma.models.Event
            The created Event record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Event record from just the required fields
        event = await Event.prisma().create(
            data={
                # data to create a Event record
                'title': 'bgeecijdgg',
                'start_time': datetime.datetime.utcnow(),
                'end_time': datetime.datetime.utcnow(),
                'user_id': 'bdiicjafbj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.EventCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Event records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Event record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Event.prisma().create_many(
            data=[
                {
                    # data to create a Event record
                    'title': 'bgehebiafc',
                    'start_time': datetime.datetime.utcnow(),
                    'end_time': datetime.datetime.utcnow(),
                    'user_id': 'bghffegacj',
                },
                {
                    # data to create a Event record
                    'title': 'bhghchehcc',
                    'start_time': datetime.datetime.utcnow(),
                    'end_time': datetime.datetime.utcnow(),
                    'user_id': 'dcgchcbbf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.EventWhereUniqueInput,
        include: Optional[types.EventInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Event record.

        Parameters
        ----------
        where
            Event filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Event model

        Returns
        -------
        prisma.models.Event
            The deleted Event record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        event = await Event.prisma().delete(
            where={
                'id': 'bdedcabahc',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.EventWhereUniqueInput,
        include: Optional[types.EventInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Event record.

        Parameters
        ----------
        where
            Event filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Event model

        Returns
        -------
        prisma.models.Event
            The found Event record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        event = await Event.prisma().find_unique(
            where={
                'id': 'ghfhiafcb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.EventWhereUniqueInput,
        include: Optional[types.EventInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Event record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Event filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Event model

        Returns
        -------
        prisma.models.Event
            The found Event record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        event = await Event.prisma().find_unique_or_raise(
            where={
                'id': 'heejgedji',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EventWhereInput] = None,
        cursor: Optional[types.EventWhereUniqueInput] = None,
        include: Optional[types.EventInclude] = None,
        order: Optional[Union[types.EventOrderByInput, List[types.EventOrderByInput]]] = None,
        distinct: Optional[List[types.EventScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Event records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Event records returned
        skip
            Ignore the first N results
        where
            Event filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Event model
        order
            Order the returned Event records by any field
        distinct
            Filter Event records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Event]
            The list of all Event records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Event records
        events = await Event.prisma().find_many(take=10)

        # find the first 5 Event records ordered by the description field
        events = await Event.prisma().find_many(
            take=5,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.EventWhereInput] = None,
        cursor: Optional[types.EventWhereUniqueInput] = None,
        include: Optional[types.EventInclude] = None,
        order: Optional[Union[types.EventOrderByInput, List[types.EventOrderByInput]]] = None,
        distinct: Optional[List[types.EventScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Event record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Event filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Event model
        order
            Order the returned Event records by any field
        distinct
            Filter Event records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Event
            The first Event record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Event record ordered by the start_time field
        event = await Event.prisma().find_first(
            skip=1,
            order={
                'start_time': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.EventWhereInput] = None,
        cursor: Optional[types.EventWhereUniqueInput] = None,
        include: Optional[types.EventInclude] = None,
        order: Optional[Union[types.EventOrderByInput, List[types.EventOrderByInput]]] = None,
        distinct: Optional[List[types.EventScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Event record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Event filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Event model
        order
            Order the returned Event records by any field
        distinct
            Filter Event records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Event
            The first Event record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Event record ordered by the end_time field
        event = await Event.prisma().find_first_or_raise(
            skip=1,
            order={
                'end_time': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.EventUpdateInput,
        where: types.EventWhereUniqueInput,
        include: Optional[types.EventInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Event record.

        Parameters
        ----------
        data
            Event record data specifying what to update
        where
            Event filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Event model

        Returns
        -------
        prisma.models.Event
            The updated Event record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        event = await Event.prisma().update(
            where={
                'id': 'bjgjgibgbf',
            },
            data={
                # data to update the Event record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.EventWhereUniqueInput,
        data: types.EventUpsertInput,
        include: Optional[types.EventInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Event filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Event model

        Returns
        -------
        prisma.models.Event
            The created or updated Event record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        event = await Event.prisma().upsert(
            where={
                'id': 'bbbgbhfjge',
            },
            data={
                'create': {
                    'id': 'bbbgbhfjge',
                    'title': 'bhghchehcc',
                    'start_time': datetime.datetime.utcnow(),
                    'end_time': datetime.datetime.utcnow(),
                    'user_id': 'dcgchcbbf',
                },
                'update': {
                    'title': 'bhghchehcc',
                    'start_time': datetime.datetime.utcnow(),
                    'end_time': datetime.datetime.utcnow(),
                    'user_id': 'dcgchcbbf',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.EventUpdateManyMutationInput,
        where: types.EventWhereInput,
    ) -> int:
        """Update multiple Event records

        Parameters
        ----------
        data
            Event data to update the selected Event records to
        where
            Filter to select the Event records to update

        Returns
        -------
        int
            The total number of Event records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Event records
        total = await Event.prisma().update_many(
            data={
                'location': 'igbehcbab'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EventWhereInput] = None,
        cursor: Optional[types.EventWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Event records present in the database

        Parameters
        ----------
        select
            Select the Event fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Event filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.EventCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Event.prisma().count()

        # results: prisma.types.EventCountAggregateOutput
        results = await Event.prisma().count(
            select={
                '_all': True,
                'user_id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.EventCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EventWhereInput] = None,
        cursor: Optional[types.EventWhereUniqueInput] = None,
    ) -> types.EventCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.EventCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EventWhereInput] = None,
        cursor: Optional[types.EventWhereUniqueInput] = None,
    ) -> Union[int, types.EventCountAggregateOutput]:
        """Count the number of Event records present in the database

        Parameters
        ----------
        select
            Select the Event fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Event filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.EventCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Event.prisma().count()

        # results: prisma.types.EventCountAggregateOutput
        results = await Event.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.EventCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.EventWhereInput] = None
    ) -> int:
        """Delete multiple Event records.

        Parameters
        ----------
        where
            Optional Event filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Event records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Event records
        total = await Event.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.EventScalarFieldKeys'],
        *,
        where: Optional['types.EventWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.EventAvgAggregateInput'] = None,
        sum: Optional['types.EventSumAggregateInput'] = None,
        min: Optional['types.EventMinAggregateInput'] = None,
        max: Optional['types.EventMaxAggregateInput'] = None,
        having: Optional['types.EventScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.EventCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.EventScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.EventScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.EventGroupByOutput']:
        """Group Event records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Event fields to group records by
        where
            Event filter to select records
        take
            Limit the maximum number of Event records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.EventGroupByOutput]
            A list of dictionaries representing the Event record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Event records by updated_at values
        # and count how many records are in each group
        results = await Event.prisma().group_by(
            ['updated_at'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class NoteActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Note]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Note.prisma().query_raw(
            'SELECT * FROM Note WHERE id = $1',
            'bdadaadhag',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Note
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Note.prisma().query_first(
            'SELECT * FROM Note WHERE title = $1',
            'bgiggdidbf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.NoteCreateInput,
        include: Optional[types.NoteInclude] = None
    ) -> _PrismaModelT:
        """Create a new Note record.

        Parameters
        ----------
        data
            Note record data
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The created Note record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Note record from just the required fields
        note = await Note.prisma().create(
            data={
                # data to create a Note record
                'title': 'caaaedabfc',
                'content': 'bigibebcib',
                'user_id': 'bigaiehgcc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.NoteCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Note records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Note record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Note.prisma().create_many(
            data=[
                {
                    # data to create a Note record
                    'title': 'beeifcbebf',
                    'content': 'bgcigfahea',
                    'user_id': 'bcejgaggif',
                },
                {
                    # data to create a Note record
                    'title': 'idfjadbcc',
                    'content': 'hgdhbjhhj',
                    'user_id': 'ecjjjfbae',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.NoteWhereUniqueInput,
        include: Optional[types.NoteInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Note record.

        Parameters
        ----------
        where
            Note filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The deleted Note record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        note = await Note.prisma().delete(
            where={
                'id': 'bhhfibbigf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.NoteWhereUniqueInput,
        include: Optional[types.NoteInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Note record.

        Parameters
        ----------
        where
            Note filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The found Note record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        note = await Note.prisma().find_unique(
            where={
                'id': 'ijdbeffgg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.NoteWhereUniqueInput,
        include: Optional[types.NoteInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Note record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Note filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The found Note record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        note = await Note.prisma().find_unique_or_raise(
            where={
                'id': 'jjfeafhfj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
        include: Optional[types.NoteInclude] = None,
        order: Optional[Union[types.NoteOrderByInput, List[types.NoteOrderByInput]]] = None,
        distinct: Optional[List[types.NoteScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Note records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Note records returned
        skip
            Ignore the first N results
        where
            Note filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Note model
        order
            Order the returned Note records by any field
        distinct
            Filter Note records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Note]
            The list of all Note records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Note records
        notes = await Note.prisma().find_many(take=10)

        # find the first 5 Note records ordered by the content field
        notes = await Note.prisma().find_many(
            take=5,
            order={
                'content': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
        include: Optional[types.NoteInclude] = None,
        order: Optional[Union[types.NoteOrderByInput, List[types.NoteOrderByInput]]] = None,
        distinct: Optional[List[types.NoteScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Note record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Note filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Note model
        order
            Order the returned Note records by any field
        distinct
            Filter Note records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Note
            The first Note record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Note record ordered by the user_id field
        note = await Note.prisma().find_first(
            skip=1,
            order={
                'user_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
        include: Optional[types.NoteInclude] = None,
        order: Optional[Union[types.NoteOrderByInput, List[types.NoteOrderByInput]]] = None,
        distinct: Optional[List[types.NoteScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Note record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Note filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Note model
        order
            Order the returned Note records by any field
        distinct
            Filter Note records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Note
            The first Note record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Note record ordered by the created_at field
        note = await Note.prisma().find_first_or_raise(
            skip=1,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.NoteUpdateInput,
        where: types.NoteWhereUniqueInput,
        include: Optional[types.NoteInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Note record.

        Parameters
        ----------
        data
            Note record data specifying what to update
        where
            Note filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The updated Note record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        note = await Note.prisma().update(
            where={
                'id': 'cbachdgfce',
            },
            data={
                # data to update the Note record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.NoteWhereUniqueInput,
        data: types.NoteUpsertInput,
        include: Optional[types.NoteInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Note filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The created or updated Note record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        note = await Note.prisma().upsert(
            where={
                'id': 'chbfcacbd',
            },
            data={
                'create': {
                    'id': 'chbfcacbd',
                    'title': 'idfjadbcc',
                    'content': 'hgdhbjhhj',
                    'user_id': 'ecjjjfbae',
                },
                'update': {
                    'title': 'idfjadbcc',
                    'content': 'hgdhbjhhj',
                    'user_id': 'ecjjjfbae',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.NoteUpdateManyMutationInput,
        where: types.NoteWhereInput,
    ) -> int:
        """Update multiple Note records

        Parameters
        ----------
        data
            Note data to update the selected Note records to
        where
            Filter to select the Note records to update

        Returns
        -------
        int
            The total number of Note records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Note records
        total = await Note.prisma().update_many(
            data={
                'updated_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Note records present in the database

        Parameters
        ----------
        select
            Select the Note fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Note filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NoteCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Note.prisma().count()

        # results: prisma.types.NoteCountAggregateOutput
        results = await Note.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.NoteCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
    ) -> types.NoteCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.NoteCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
    ) -> Union[int, types.NoteCountAggregateOutput]:
        """Count the number of Note records present in the database

        Parameters
        ----------
        select
            Select the Note fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Note filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NoteCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Note.prisma().count()

        # results: prisma.types.NoteCountAggregateOutput
        results = await Note.prisma().count(
            select={
                '_all': True,
                'title': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.NoteCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.NoteWhereInput] = None
    ) -> int:
        """Delete multiple Note records.

        Parameters
        ----------
        where
            Optional Note filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Note records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Note records
        total = await Note.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.NoteScalarFieldKeys'],
        *,
        where: Optional['types.NoteWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.NoteAvgAggregateInput'] = None,
        sum: Optional['types.NoteSumAggregateInput'] = None,
        min: Optional['types.NoteMinAggregateInput'] = None,
        max: Optional['types.NoteMaxAggregateInput'] = None,
        having: Optional['types.NoteScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.NoteCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.NoteScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.NoteScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.NoteGroupByOutput']:
        """Group Note records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Note fields to group records by
        where
            Note filter to select records
        take
            Limit the maximum number of Note records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.NoteGroupByOutput]
            A list of dictionaries representing the Note record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Note records by content values
        # and count how many records are in each group
        results = await Note.prisma().group_by(
            ['content'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class LLMConfigActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.LLMConfig]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await LLMConfig.prisma().query_raw(
            'SELECT * FROM LLMConfig WHERE id = $1',
            'efggddide',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.LLMConfig
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await LLMConfig.prisma().query_first(
            'SELECT * FROM LLMConfig WHERE model_name = $1',
            'caficfigfb',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.LLMConfigCreateInput,
        include: Optional[types.LLMConfigInclude] = None
    ) -> _PrismaModelT:
        """Create a new LLMConfig record.

        Parameters
        ----------
        data
            LLMConfig record data
        include
            Specifies which relations should be loaded on the returned LLMConfig model

        Returns
        -------
        prisma.models.LLMConfig
            The created LLMConfig record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a LLMConfig record from just the required fields
        llmconfig = await LLMConfig.prisma().create(
            data={
                # data to create a LLMConfig record
                'model_name': 'bfidgijfjc',
                'api_key': 'ihieecagf',
                'user_id': 'bghfciaafe',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.LLMConfigCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple LLMConfig records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of LLMConfig record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await LLMConfig.prisma().create_many(
            data=[
                {
                    # data to create a LLMConfig record
                    'model_name': 'bgchfhgceh',
                    'api_key': 'cafeiaccbc',
                    'user_id': 'gaddfhfh',
                },
                {
                    # data to create a LLMConfig record
                    'model_name': 'gieegcbeg',
                    'api_key': 'bgcffadich',
                    'user_id': 'fcbichhci',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.LLMConfigWhereUniqueInput,
        include: Optional[types.LLMConfigInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single LLMConfig record.

        Parameters
        ----------
        where
            LLMConfig filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned LLMConfig model

        Returns
        -------
        prisma.models.LLMConfig
            The deleted LLMConfig record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        llmconfig = await LLMConfig.prisma().delete(
            where={
                'id': 'bcggadccgf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.LLMConfigWhereUniqueInput,
        include: Optional[types.LLMConfigInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique LLMConfig record.

        Parameters
        ----------
        where
            LLMConfig filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned LLMConfig model

        Returns
        -------
        prisma.models.LLMConfig
            The found LLMConfig record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        llmconfig = await LLMConfig.prisma().find_unique(
            where={
                'id': 'jdcfdcgc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.LLMConfigWhereUniqueInput,
        include: Optional[types.LLMConfigInclude] = None
    ) -> _PrismaModelT:
        """Find a unique LLMConfig record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            LLMConfig filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned LLMConfig model

        Returns
        -------
        prisma.models.LLMConfig
            The found LLMConfig record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        llmconfig = await LLMConfig.prisma().find_unique_or_raise(
            where={
                'id': 'cafdaehjid',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LLMConfigWhereInput] = None,
        cursor: Optional[types.LLMConfigWhereUniqueInput] = None,
        include: Optional[types.LLMConfigInclude] = None,
        order: Optional[Union[types.LLMConfigOrderByInput, List[types.LLMConfigOrderByInput]]] = None,
        distinct: Optional[List[types.LLMConfigScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple LLMConfig records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of LLMConfig records returned
        skip
            Ignore the first N results
        where
            LLMConfig filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned LLMConfig model
        order
            Order the returned LLMConfig records by any field
        distinct
            Filter LLMConfig records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.LLMConfig]
            The list of all LLMConfig records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 LLMConfig records
        llmconfigs = await LLMConfig.prisma().find_many(take=10)

        # find the first 5 LLMConfig records ordered by the api_key field
        llmconfigs = await LLMConfig.prisma().find_many(
            take=5,
            order={
                'api_key': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.LLMConfigWhereInput] = None,
        cursor: Optional[types.LLMConfigWhereUniqueInput] = None,
        include: Optional[types.LLMConfigInclude] = None,
        order: Optional[Union[types.LLMConfigOrderByInput, List[types.LLMConfigOrderByInput]]] = None,
        distinct: Optional[List[types.LLMConfigScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single LLMConfig record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            LLMConfig filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned LLMConfig model
        order
            Order the returned LLMConfig records by any field
        distinct
            Filter LLMConfig records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.LLMConfig
            The first LLMConfig record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second LLMConfig record ordered by the temperature field
        llmconfig = await LLMConfig.prisma().find_first(
            skip=1,
            order={
                'temperature': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.LLMConfigWhereInput] = None,
        cursor: Optional[types.LLMConfigWhereUniqueInput] = None,
        include: Optional[types.LLMConfigInclude] = None,
        order: Optional[Union[types.LLMConfigOrderByInput, List[types.LLMConfigOrderByInput]]] = None,
        distinct: Optional[List[types.LLMConfigScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single LLMConfig record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            LLMConfig filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned LLMConfig model
        order
            Order the returned LLMConfig records by any field
        distinct
            Filter LLMConfig records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.LLMConfig
            The first LLMConfig record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second LLMConfig record ordered by the max_tokens field
        llmconfig = await LLMConfig.prisma().find_first_or_raise(
            skip=1,
            order={
                'max_tokens': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.LLMConfigUpdateInput,
        where: types.LLMConfigWhereUniqueInput,
        include: Optional[types.LLMConfigInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single LLMConfig record.

        Parameters
        ----------
        data
            LLMConfig record data specifying what to update
        where
            LLMConfig filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned LLMConfig model

        Returns
        -------
        prisma.models.LLMConfig
            The updated LLMConfig record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        llmconfig = await LLMConfig.prisma().update(
            where={
                'id': 'gifdddbia',
            },
            data={
                # data to update the LLMConfig record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.LLMConfigWhereUniqueInput,
        data: types.LLMConfigUpsertInput,
        include: Optional[types.LLMConfigInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            LLMConfig filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned LLMConfig model

        Returns
        -------
        prisma.models.LLMConfig
            The created or updated LLMConfig record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        llmconfig = await LLMConfig.prisma().upsert(
            where={
                'id': 'bchehecef',
            },
            data={
                'create': {
                    'id': 'bchehecef',
                    'model_name': 'gieegcbeg',
                    'api_key': 'bgcffadich',
                    'user_id': 'fcbichhci',
                },
                'update': {
                    'model_name': 'gieegcbeg',
                    'api_key': 'bgcffadich',
                    'user_id': 'fcbichhci',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.LLMConfigUpdateManyMutationInput,
        where: types.LLMConfigWhereInput,
    ) -> int:
        """Update multiple LLMConfig records

        Parameters
        ----------
        data
            LLMConfig data to update the selected LLMConfig records to
        where
            Filter to select the LLMConfig records to update

        Returns
        -------
        int
            The total number of LLMConfig records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all LLMConfig records
        total = await LLMConfig.prisma().update_many(
            data={
                'user_id': 'jeijcbhfe'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LLMConfigWhereInput] = None,
        cursor: Optional[types.LLMConfigWhereUniqueInput] = None,
    ) -> int:
        """Count the number of LLMConfig records present in the database

        Parameters
        ----------
        select
            Select the LLMConfig fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            LLMConfig filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.LLMConfigCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await LLMConfig.prisma().count()

        # results: prisma.types.LLMConfigCountAggregateOutput
        results = await LLMConfig.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.LLMConfigCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LLMConfigWhereInput] = None,
        cursor: Optional[types.LLMConfigWhereUniqueInput] = None,
    ) -> types.LLMConfigCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.LLMConfigCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.LLMConfigWhereInput] = None,
        cursor: Optional[types.LLMConfigWhereUniqueInput] = None,
    ) -> Union[int, types.LLMConfigCountAggregateOutput]:
        """Count the number of LLMConfig records present in the database

        Parameters
        ----------
        select
            Select the LLMConfig fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            LLMConfig filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.LLMConfigCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await LLMConfig.prisma().count()

        # results: prisma.types.LLMConfigCountAggregateOutput
        results = await LLMConfig.prisma().count(
            select={
                '_all': True,
                'updated_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.LLMConfigCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.LLMConfigWhereInput] = None
    ) -> int:
        """Delete multiple LLMConfig records.

        Parameters
        ----------
        where
            Optional LLMConfig filter to find the records to be deleted

        Returns
        -------
        int
            The total number of LLMConfig records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all LLMConfig records
        total = await LLMConfig.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.LLMConfigScalarFieldKeys'],
        *,
        where: Optional['types.LLMConfigWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.LLMConfigAvgAggregateInput'] = None,
        sum: Optional['types.LLMConfigSumAggregateInput'] = None,
        min: Optional['types.LLMConfigMinAggregateInput'] = None,
        max: Optional['types.LLMConfigMaxAggregateInput'] = None,
        having: Optional['types.LLMConfigScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.LLMConfigCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.LLMConfigScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.LLMConfigScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.LLMConfigGroupByOutput']:
        """Group LLMConfig records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar LLMConfig fields to group records by
        where
            LLMConfig filter to select records
        take
            Limit the maximum number of LLMConfig records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.LLMConfigGroupByOutput]
            A list of dictionaries representing the LLMConfig record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group LLMConfig records by id values
        # and count how many records are in each group
        results = await LLMConfig.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models