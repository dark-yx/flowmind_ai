# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Task types

class TaskOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Task create method"""
    id: _str
    description: Optional[_str]
    due_date: Optional[datetime.datetime]
    priority: _str
    status: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class TaskCreateInput(TaskOptionalCreateInput):
    """Required arguments to the Task create method"""
    title: _str
    user_id: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TaskOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Task create method, without relations"""
    id: _str
    description: Optional[_str]
    due_date: Optional[datetime.datetime]
    priority: _str
    status: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class TaskCreateWithoutRelationsInput(TaskOptionalCreateWithoutRelationsInput):
    """Required arguments to the Task create method, without relations"""
    title: _str
    user_id: _str

class TaskConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TaskCreateWithoutRelationsInput'
    where: 'TaskWhereUniqueInput'

class TaskCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TaskCreateWithoutRelationsInput'
    connect: 'TaskWhereUniqueInput'
    connect_or_create: 'TaskConnectOrCreateWithoutRelationsInput'


class TaskCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TaskCreateWithoutRelationsInput', List['TaskCreateWithoutRelationsInput']]
    connect: Union['TaskWhereUniqueInput', List['TaskWhereUniqueInput']]
    connect_or_create: Union['TaskConnectOrCreateWithoutRelationsInput', List['TaskConnectOrCreateWithoutRelationsInput']]

_TaskWhereUnique_id_Input = TypedDict(
    '_TaskWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

TaskWhereUniqueInput = _TaskWhereUnique_id_Input


class TaskUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    description: Optional[_str]
    due_date: Optional[datetime.datetime]
    priority: _str
    status: _str
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class TaskUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    description: Optional[_str]
    due_date: Optional[datetime.datetime]
    priority: _str
    status: _str
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class TaskUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TaskCreateWithoutRelationsInput']
    connect: List['TaskWhereUniqueInput']
    connect_or_create: List['TaskConnectOrCreateWithoutRelationsInput']
    set: List['TaskWhereUniqueInput']
    disconnect: List['TaskWhereUniqueInput']
    delete: List['TaskWhereUniqueInput']

    # TODO
    # update: List['TaskUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TaskUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TaskScalarWhereInput']
    # upsert: List['TaskUpserteWithWhereUniqueWithoutRelationsInput']


class TaskUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TaskCreateWithoutRelationsInput'
    connect: 'TaskWhereUniqueInput'
    connect_or_create: 'TaskConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TaskUpdateInput'
    # upsert: 'TaskUpsertWithoutRelationsInput'


class TaskUpsertInput(TypedDict):
    create: 'TaskCreateInput'
    update: 'TaskUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Task_id_OrderByInput = TypedDict(
    '_Task_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Task_title_OrderByInput = TypedDict(
    '_Task_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Task_description_OrderByInput = TypedDict(
    '_Task_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Task_due_date_OrderByInput = TypedDict(
    '_Task_due_date_OrderByInput',
    {
        'due_date': 'SortOrder',
    },
    total=True
)

_Task_priority_OrderByInput = TypedDict(
    '_Task_priority_OrderByInput',
    {
        'priority': 'SortOrder',
    },
    total=True
)

_Task_status_OrderByInput = TypedDict(
    '_Task_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Task_user_id_OrderByInput = TypedDict(
    '_Task_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_Task_created_at_OrderByInput = TypedDict(
    '_Task_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Task_updated_at_OrderByInput = TypedDict(
    '_Task_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_Task_RelevanceInner = TypedDict(
    '_Task_RelevanceInner',
    {
        'fields': 'List[TaskScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Task_RelevanceOrderByInput = TypedDict(
    '_Task_RelevanceOrderByInput',
    {
        '_relevance': '_Task_RelevanceInner',
    },
    total=True
)

TaskOrderByInput = Union[
    '_Task_id_OrderByInput',
    '_Task_title_OrderByInput',
    '_Task_description_OrderByInput',
    '_Task_due_date_OrderByInput',
    '_Task_priority_OrderByInput',
    '_Task_status_OrderByInput',
    '_Task_user_id_OrderByInput',
    '_Task_created_at_OrderByInput',
    '_Task_updated_at_OrderByInput',
    '_Task_RelevanceOrderByInput',
]



# recursive Task types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TaskRelationFilter = TypedDict(
    'TaskRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TaskListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TaskInclude(TypedDict, total=False):
    """Task relational arguments"""


    

class TaskIncludeFromTask(TypedDict, total=False):
    """Relational arguments for Task"""


class TaskIncludeFromTaskRecursive1(TypedDict, total=False):
    """Relational arguments for Task"""


class TaskIncludeFromTaskRecursive2(TypedDict, total=False):
    """Relational arguments for Task"""


class TaskIncludeFromTaskRecursive3(TypedDict, total=False):
    """Relational arguments for Task"""


class TaskIncludeFromTaskRecursive4(TypedDict, total=False):
    """Relational arguments for Task"""

    

class TaskArgsFromTask(TypedDict, total=False):
    """Arguments for Task"""
    include: 'TaskIncludeFromTaskRecursive1'


class TaskArgsFromTaskRecursive1(TypedDict, total=False):
    """Arguments for Task"""
    include: 'TaskIncludeFromTaskRecursive2'


class TaskArgsFromTaskRecursive2(TypedDict, total=False):
    """Arguments for Task"""
    include: 'TaskIncludeFromTaskRecursive3'


class TaskArgsFromTaskRecursive3(TypedDict, total=False):
    """Arguments for Task"""
    include: 'TaskIncludeFromTaskRecursive4'


class TaskArgsFromTaskRecursive4(TypedDict, total=False):
    """Arguments for Task"""
    
    

class FindManyTaskArgsFromTask(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive1'


class FindManyTaskArgsFromTaskRecursive1(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive2'


class FindManyTaskArgsFromTaskRecursive2(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive3'


class FindManyTaskArgsFromTaskRecursive3(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive4'


class FindManyTaskArgsFromTaskRecursive4(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    
    

class EventIncludeFromTask(TypedDict, total=False):
    """Relational arguments for Task"""


class EventIncludeFromTaskRecursive1(TypedDict, total=False):
    """Relational arguments for Task"""


class EventIncludeFromTaskRecursive2(TypedDict, total=False):
    """Relational arguments for Task"""


class EventIncludeFromTaskRecursive3(TypedDict, total=False):
    """Relational arguments for Task"""


class EventIncludeFromTaskRecursive4(TypedDict, total=False):
    """Relational arguments for Task"""

    

class EventArgsFromTask(TypedDict, total=False):
    """Arguments for Task"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromTaskRecursive1(TypedDict, total=False):
    """Arguments for Task"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromTaskRecursive2(TypedDict, total=False):
    """Arguments for Task"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromTaskRecursive3(TypedDict, total=False):
    """Arguments for Task"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromTaskRecursive4(TypedDict, total=False):
    """Arguments for Task"""
    
    

class FindManyEventArgsFromTask(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromTaskRecursive1(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromTaskRecursive2(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromTaskRecursive3(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromTaskRecursive4(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class NoteIncludeFromTask(TypedDict, total=False):
    """Relational arguments for Task"""


class NoteIncludeFromTaskRecursive1(TypedDict, total=False):
    """Relational arguments for Task"""


class NoteIncludeFromTaskRecursive2(TypedDict, total=False):
    """Relational arguments for Task"""


class NoteIncludeFromTaskRecursive3(TypedDict, total=False):
    """Relational arguments for Task"""


class NoteIncludeFromTaskRecursive4(TypedDict, total=False):
    """Relational arguments for Task"""

    

class NoteArgsFromTask(TypedDict, total=False):
    """Arguments for Task"""
    include: 'NoteIncludeFromNoteRecursive1'


class NoteArgsFromTaskRecursive1(TypedDict, total=False):
    """Arguments for Task"""
    include: 'NoteIncludeFromNoteRecursive2'


class NoteArgsFromTaskRecursive2(TypedDict, total=False):
    """Arguments for Task"""
    include: 'NoteIncludeFromNoteRecursive3'


class NoteArgsFromTaskRecursive3(TypedDict, total=False):
    """Arguments for Task"""
    include: 'NoteIncludeFromNoteRecursive4'


class NoteArgsFromTaskRecursive4(TypedDict, total=False):
    """Arguments for Task"""
    
    

class FindManyNoteArgsFromTask(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive1'


class FindManyNoteArgsFromTaskRecursive1(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive2'


class FindManyNoteArgsFromTaskRecursive2(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive3'


class FindManyNoteArgsFromTaskRecursive3(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive4'


class FindManyNoteArgsFromTaskRecursive4(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    
    

class LLMConfigIncludeFromTask(TypedDict, total=False):
    """Relational arguments for Task"""


class LLMConfigIncludeFromTaskRecursive1(TypedDict, total=False):
    """Relational arguments for Task"""


class LLMConfigIncludeFromTaskRecursive2(TypedDict, total=False):
    """Relational arguments for Task"""


class LLMConfigIncludeFromTaskRecursive3(TypedDict, total=False):
    """Relational arguments for Task"""


class LLMConfigIncludeFromTaskRecursive4(TypedDict, total=False):
    """Relational arguments for Task"""

    

class LLMConfigArgsFromTask(TypedDict, total=False):
    """Arguments for Task"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive1'


class LLMConfigArgsFromTaskRecursive1(TypedDict, total=False):
    """Arguments for Task"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive2'


class LLMConfigArgsFromTaskRecursive2(TypedDict, total=False):
    """Arguments for Task"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive3'


class LLMConfigArgsFromTaskRecursive3(TypedDict, total=False):
    """Arguments for Task"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive4'


class LLMConfigArgsFromTaskRecursive4(TypedDict, total=False):
    """Arguments for Task"""
    
    

class FindManyLLMConfigArgsFromTask(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive1'


class FindManyLLMConfigArgsFromTaskRecursive1(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive2'


class FindManyLLMConfigArgsFromTaskRecursive2(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive3'


class FindManyLLMConfigArgsFromTaskRecursive3(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive4'


class FindManyLLMConfigArgsFromTaskRecursive4(TypedDict, total=False):
    """Arguments for Task"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    


FindManyTaskArgs = FindManyTaskArgsFromTask
FindFirstTaskArgs = FindManyTaskArgsFromTask


    

class TaskWhereInput(TypedDict, total=False):
    """Task arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    due_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    priority: Union[_str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TaskWhereInputRecursive1', List['TaskWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TaskWhereInputRecursive1']
    OR: List['TaskWhereInputRecursive1']
    NOT: List['TaskWhereInputRecursive1']


class TaskWhereInputRecursive1(TypedDict, total=False):
    """Task arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    due_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    priority: Union[_str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TaskWhereInputRecursive2', List['TaskWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TaskWhereInputRecursive2']
    OR: List['TaskWhereInputRecursive2']
    NOT: List['TaskWhereInputRecursive2']


class TaskWhereInputRecursive2(TypedDict, total=False):
    """Task arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    due_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    priority: Union[_str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TaskWhereInputRecursive3', List['TaskWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TaskWhereInputRecursive3']
    OR: List['TaskWhereInputRecursive3']
    NOT: List['TaskWhereInputRecursive3']


class TaskWhereInputRecursive3(TypedDict, total=False):
    """Task arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    due_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    priority: Union[_str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TaskWhereInputRecursive4', List['TaskWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TaskWhereInputRecursive4']
    OR: List['TaskWhereInputRecursive4']
    NOT: List['TaskWhereInputRecursive4']


class TaskWhereInputRecursive4(TypedDict, total=False):
    """Task arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    due_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    priority: Union[_str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Task types


    

class TaskScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Task arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    due_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    priority: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TaskScalarWhereWithAggregatesInputRecursive1']
    OR: List['TaskScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TaskScalarWhereWithAggregatesInputRecursive1']


class TaskScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Task arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    due_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    priority: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TaskScalarWhereWithAggregatesInputRecursive2']
    OR: List['TaskScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TaskScalarWhereWithAggregatesInputRecursive2']


class TaskScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Task arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    due_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    priority: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TaskScalarWhereWithAggregatesInputRecursive3']
    OR: List['TaskScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TaskScalarWhereWithAggregatesInputRecursive3']


class TaskScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Task arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    due_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    priority: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TaskScalarWhereWithAggregatesInputRecursive4']
    OR: List['TaskScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TaskScalarWhereWithAggregatesInputRecursive4']


class TaskScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Task arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    due_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    priority: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class TaskGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    description: _str
    due_date: datetime.datetime
    priority: _str
    status: _str
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'TaskSumAggregateOutput'
    _avg: 'TaskAvgAggregateOutput'
    _min: 'TaskMinAggregateOutput'
    _max: 'TaskMaxAggregateOutput'
    _count: 'TaskCountAggregateOutput'


class TaskAvgAggregateOutput(TypedDict, total=False):
    """Task output for aggregating averages"""


class TaskSumAggregateOutput(TypedDict, total=False):
    """Task output for aggregating sums"""


class TaskScalarAggregateOutput(TypedDict, total=False):
    """Task output including scalar fields"""
    id: _str
    title: _str
    description: _str
    due_date: datetime.datetime
    priority: _str
    status: _str
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


TaskMinAggregateOutput = TaskScalarAggregateOutput
TaskMaxAggregateOutput = TaskScalarAggregateOutput


class TaskMaxAggregateInput(TypedDict, total=False):
    """Task input for aggregating by max"""
    id: bool
    title: bool
    description: bool
    due_date: bool
    priority: bool
    status: bool
    user_id: bool
    created_at: bool
    updated_at: bool


class TaskMinAggregateInput(TypedDict, total=False):
    """Task input for aggregating by min"""
    id: bool
    title: bool
    description: bool
    due_date: bool
    priority: bool
    status: bool
    user_id: bool
    created_at: bool
    updated_at: bool


class TaskNumberAggregateInput(TypedDict, total=False):
    """Task input for aggregating numbers"""


TaskAvgAggregateInput = TaskNumberAggregateInput
TaskSumAggregateInput = TaskNumberAggregateInput


TaskCountAggregateInput = TypedDict(
    'TaskCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'description': bool,
        'due_date': bool,
        'priority': bool,
        'status': bool,
        'user_id': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

TaskCountAggregateOutput = TypedDict(
    'TaskCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'description': int,
        'due_date': int,
        'priority': int,
        'status': int,
        'user_id': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


TaskKeys = Literal[
    'id',
    'title',
    'description',
    'due_date',
    'priority',
    'status',
    'user_id',
    'created_at',
    'updated_at',
]
TaskScalarFieldKeys = Literal[
    'id',
    'title',
    'description',
    'due_date',
    'priority',
    'status',
    'user_id',
    'created_at',
    'updated_at',
]
TaskScalarFieldKeysT = TypeVar('TaskScalarFieldKeysT', bound=TaskScalarFieldKeys)

TaskRelationalFieldKeys = _NoneType

# Event types

class EventOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Event create method"""
    id: _str
    description: Optional[_str]
    location: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class EventCreateInput(EventOptionalCreateInput):
    """Required arguments to the Event create method"""
    title: _str
    start_time: datetime.datetime
    end_time: datetime.datetime
    user_id: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class EventOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Event create method, without relations"""
    id: _str
    description: Optional[_str]
    location: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class EventCreateWithoutRelationsInput(EventOptionalCreateWithoutRelationsInput):
    """Required arguments to the Event create method, without relations"""
    title: _str
    start_time: datetime.datetime
    end_time: datetime.datetime
    user_id: _str

class EventConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'EventCreateWithoutRelationsInput'
    where: 'EventWhereUniqueInput'

class EventCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'EventCreateWithoutRelationsInput'
    connect: 'EventWhereUniqueInput'
    connect_or_create: 'EventConnectOrCreateWithoutRelationsInput'


class EventCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['EventCreateWithoutRelationsInput', List['EventCreateWithoutRelationsInput']]
    connect: Union['EventWhereUniqueInput', List['EventWhereUniqueInput']]
    connect_or_create: Union['EventConnectOrCreateWithoutRelationsInput', List['EventConnectOrCreateWithoutRelationsInput']]

_EventWhereUnique_id_Input = TypedDict(
    '_EventWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

EventWhereUniqueInput = _EventWhereUnique_id_Input


class EventUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    description: Optional[_str]
    start_time: datetime.datetime
    end_time: datetime.datetime
    location: Optional[_str]
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class EventUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    description: Optional[_str]
    start_time: datetime.datetime
    end_time: datetime.datetime
    location: Optional[_str]
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class EventUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['EventCreateWithoutRelationsInput']
    connect: List['EventWhereUniqueInput']
    connect_or_create: List['EventConnectOrCreateWithoutRelationsInput']
    set: List['EventWhereUniqueInput']
    disconnect: List['EventWhereUniqueInput']
    delete: List['EventWhereUniqueInput']

    # TODO
    # update: List['EventUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['EventUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['EventScalarWhereInput']
    # upsert: List['EventUpserteWithWhereUniqueWithoutRelationsInput']


class EventUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'EventCreateWithoutRelationsInput'
    connect: 'EventWhereUniqueInput'
    connect_or_create: 'EventConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'EventUpdateInput'
    # upsert: 'EventUpsertWithoutRelationsInput'


class EventUpsertInput(TypedDict):
    create: 'EventCreateInput'
    update: 'EventUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Event_id_OrderByInput = TypedDict(
    '_Event_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Event_title_OrderByInput = TypedDict(
    '_Event_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Event_description_OrderByInput = TypedDict(
    '_Event_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Event_start_time_OrderByInput = TypedDict(
    '_Event_start_time_OrderByInput',
    {
        'start_time': 'SortOrder',
    },
    total=True
)

_Event_end_time_OrderByInput = TypedDict(
    '_Event_end_time_OrderByInput',
    {
        'end_time': 'SortOrder',
    },
    total=True
)

_Event_location_OrderByInput = TypedDict(
    '_Event_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_Event_user_id_OrderByInput = TypedDict(
    '_Event_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_Event_created_at_OrderByInput = TypedDict(
    '_Event_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Event_updated_at_OrderByInput = TypedDict(
    '_Event_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_Event_RelevanceInner = TypedDict(
    '_Event_RelevanceInner',
    {
        'fields': 'List[EventScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Event_RelevanceOrderByInput = TypedDict(
    '_Event_RelevanceOrderByInput',
    {
        '_relevance': '_Event_RelevanceInner',
    },
    total=True
)

EventOrderByInput = Union[
    '_Event_id_OrderByInput',
    '_Event_title_OrderByInput',
    '_Event_description_OrderByInput',
    '_Event_start_time_OrderByInput',
    '_Event_end_time_OrderByInput',
    '_Event_location_OrderByInput',
    '_Event_user_id_OrderByInput',
    '_Event_created_at_OrderByInput',
    '_Event_updated_at_OrderByInput',
    '_Event_RelevanceOrderByInput',
]



# recursive Event types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

EventRelationFilter = TypedDict(
    'EventRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class EventListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class EventInclude(TypedDict, total=False):
    """Event relational arguments"""


    

class TaskIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class TaskIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class TaskIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class TaskIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class TaskIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class TaskArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'TaskIncludeFromTaskRecursive1'


class TaskArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'TaskIncludeFromTaskRecursive2'


class TaskArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'TaskIncludeFromTaskRecursive3'


class TaskArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'TaskIncludeFromTaskRecursive4'


class TaskArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyTaskArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive1'


class FindManyTaskArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive2'


class FindManyTaskArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive3'


class FindManyTaskArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive4'


class FindManyTaskArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    
    

class EventIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class EventIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class EventIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class EventIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class EventIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class EventArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyEventArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class NoteIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class NoteIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class NoteIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class NoteIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class NoteIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class NoteArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'NoteIncludeFromNoteRecursive1'


class NoteArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'NoteIncludeFromNoteRecursive2'


class NoteArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'NoteIncludeFromNoteRecursive3'


class NoteArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'NoteIncludeFromNoteRecursive4'


class NoteArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyNoteArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive1'


class FindManyNoteArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive2'


class FindManyNoteArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive3'


class FindManyNoteArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive4'


class FindManyNoteArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    
    

class LLMConfigIncludeFromEvent(TypedDict, total=False):
    """Relational arguments for Event"""


class LLMConfigIncludeFromEventRecursive1(TypedDict, total=False):
    """Relational arguments for Event"""


class LLMConfigIncludeFromEventRecursive2(TypedDict, total=False):
    """Relational arguments for Event"""


class LLMConfigIncludeFromEventRecursive3(TypedDict, total=False):
    """Relational arguments for Event"""


class LLMConfigIncludeFromEventRecursive4(TypedDict, total=False):
    """Relational arguments for Event"""

    

class LLMConfigArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive1'


class LLMConfigArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive2'


class LLMConfigArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive3'


class LLMConfigArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive4'


class LLMConfigArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    
    

class FindManyLLMConfigArgsFromEvent(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive1'


class FindManyLLMConfigArgsFromEventRecursive1(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive2'


class FindManyLLMConfigArgsFromEventRecursive2(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive3'


class FindManyLLMConfigArgsFromEventRecursive3(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive4'


class FindManyLLMConfigArgsFromEventRecursive4(TypedDict, total=False):
    """Arguments for Event"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    


FindManyEventArgs = FindManyEventArgsFromEvent
FindFirstEventArgs = FindManyEventArgsFromEvent


    

class EventWhereInput(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeFilter']
    end_time: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union[None, _str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['EventWhereInputRecursive1', List['EventWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['EventWhereInputRecursive1']
    OR: List['EventWhereInputRecursive1']
    NOT: List['EventWhereInputRecursive1']


class EventWhereInputRecursive1(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeFilter']
    end_time: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union[None, _str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['EventWhereInputRecursive2', List['EventWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['EventWhereInputRecursive2']
    OR: List['EventWhereInputRecursive2']
    NOT: List['EventWhereInputRecursive2']


class EventWhereInputRecursive2(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeFilter']
    end_time: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union[None, _str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['EventWhereInputRecursive3', List['EventWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['EventWhereInputRecursive3']
    OR: List['EventWhereInputRecursive3']
    NOT: List['EventWhereInputRecursive3']


class EventWhereInputRecursive3(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeFilter']
    end_time: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union[None, _str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['EventWhereInputRecursive4', List['EventWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['EventWhereInputRecursive4']
    OR: List['EventWhereInputRecursive4']
    NOT: List['EventWhereInputRecursive4']


class EventWhereInputRecursive4(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeFilter']
    end_time: Union[datetime.datetime, 'types.DateTimeFilter']
    location: Union[None, _str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Event types


    

class EventScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    end_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['EventScalarWhereWithAggregatesInputRecursive1']
    OR: List['EventScalarWhereWithAggregatesInputRecursive1']
    NOT: List['EventScalarWhereWithAggregatesInputRecursive1']


class EventScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    end_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['EventScalarWhereWithAggregatesInputRecursive2']
    OR: List['EventScalarWhereWithAggregatesInputRecursive2']
    NOT: List['EventScalarWhereWithAggregatesInputRecursive2']


class EventScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    end_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['EventScalarWhereWithAggregatesInputRecursive3']
    OR: List['EventScalarWhereWithAggregatesInputRecursive3']
    NOT: List['EventScalarWhereWithAggregatesInputRecursive3']


class EventScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    end_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['EventScalarWhereWithAggregatesInputRecursive4']
    OR: List['EventScalarWhereWithAggregatesInputRecursive4']
    NOT: List['EventScalarWhereWithAggregatesInputRecursive4']


class EventScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Event arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    end_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class EventGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    description: _str
    start_time: datetime.datetime
    end_time: datetime.datetime
    location: _str
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'EventSumAggregateOutput'
    _avg: 'EventAvgAggregateOutput'
    _min: 'EventMinAggregateOutput'
    _max: 'EventMaxAggregateOutput'
    _count: 'EventCountAggregateOutput'


class EventAvgAggregateOutput(TypedDict, total=False):
    """Event output for aggregating averages"""


class EventSumAggregateOutput(TypedDict, total=False):
    """Event output for aggregating sums"""


class EventScalarAggregateOutput(TypedDict, total=False):
    """Event output including scalar fields"""
    id: _str
    title: _str
    description: _str
    start_time: datetime.datetime
    end_time: datetime.datetime
    location: _str
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


EventMinAggregateOutput = EventScalarAggregateOutput
EventMaxAggregateOutput = EventScalarAggregateOutput


class EventMaxAggregateInput(TypedDict, total=False):
    """Event input for aggregating by max"""
    id: bool
    title: bool
    description: bool
    start_time: bool
    end_time: bool
    location: bool
    user_id: bool
    created_at: bool
    updated_at: bool


class EventMinAggregateInput(TypedDict, total=False):
    """Event input for aggregating by min"""
    id: bool
    title: bool
    description: bool
    start_time: bool
    end_time: bool
    location: bool
    user_id: bool
    created_at: bool
    updated_at: bool


class EventNumberAggregateInput(TypedDict, total=False):
    """Event input for aggregating numbers"""


EventAvgAggregateInput = EventNumberAggregateInput
EventSumAggregateInput = EventNumberAggregateInput


EventCountAggregateInput = TypedDict(
    'EventCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'description': bool,
        'start_time': bool,
        'end_time': bool,
        'location': bool,
        'user_id': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

EventCountAggregateOutput = TypedDict(
    'EventCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'description': int,
        'start_time': int,
        'end_time': int,
        'location': int,
        'user_id': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


EventKeys = Literal[
    'id',
    'title',
    'description',
    'start_time',
    'end_time',
    'location',
    'user_id',
    'created_at',
    'updated_at',
]
EventScalarFieldKeys = Literal[
    'id',
    'title',
    'description',
    'start_time',
    'end_time',
    'location',
    'user_id',
    'created_at',
    'updated_at',
]
EventScalarFieldKeysT = TypeVar('EventScalarFieldKeysT', bound=EventScalarFieldKeys)

EventRelationalFieldKeys = _NoneType

# Note types

class NoteOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Note create method"""
    id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class NoteCreateInput(NoteOptionalCreateInput):
    """Required arguments to the Note create method"""
    title: _str
    content: _str
    user_id: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class NoteOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Note create method, without relations"""
    id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class NoteCreateWithoutRelationsInput(NoteOptionalCreateWithoutRelationsInput):
    """Required arguments to the Note create method, without relations"""
    title: _str
    content: _str
    user_id: _str

class NoteConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'NoteCreateWithoutRelationsInput'
    where: 'NoteWhereUniqueInput'

class NoteCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'NoteCreateWithoutRelationsInput'
    connect: 'NoteWhereUniqueInput'
    connect_or_create: 'NoteConnectOrCreateWithoutRelationsInput'


class NoteCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['NoteCreateWithoutRelationsInput', List['NoteCreateWithoutRelationsInput']]
    connect: Union['NoteWhereUniqueInput', List['NoteWhereUniqueInput']]
    connect_or_create: Union['NoteConnectOrCreateWithoutRelationsInput', List['NoteConnectOrCreateWithoutRelationsInput']]

_NoteWhereUnique_id_Input = TypedDict(
    '_NoteWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

NoteWhereUniqueInput = _NoteWhereUnique_id_Input


class NoteUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    content: _str
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class NoteUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    content: _str
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class NoteUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['NoteCreateWithoutRelationsInput']
    connect: List['NoteWhereUniqueInput']
    connect_or_create: List['NoteConnectOrCreateWithoutRelationsInput']
    set: List['NoteWhereUniqueInput']
    disconnect: List['NoteWhereUniqueInput']
    delete: List['NoteWhereUniqueInput']

    # TODO
    # update: List['NoteUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['NoteUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['NoteScalarWhereInput']
    # upsert: List['NoteUpserteWithWhereUniqueWithoutRelationsInput']


class NoteUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'NoteCreateWithoutRelationsInput'
    connect: 'NoteWhereUniqueInput'
    connect_or_create: 'NoteConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'NoteUpdateInput'
    # upsert: 'NoteUpsertWithoutRelationsInput'


class NoteUpsertInput(TypedDict):
    create: 'NoteCreateInput'
    update: 'NoteUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Note_id_OrderByInput = TypedDict(
    '_Note_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Note_title_OrderByInput = TypedDict(
    '_Note_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Note_content_OrderByInput = TypedDict(
    '_Note_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Note_user_id_OrderByInput = TypedDict(
    '_Note_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_Note_created_at_OrderByInput = TypedDict(
    '_Note_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Note_updated_at_OrderByInput = TypedDict(
    '_Note_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_Note_RelevanceInner = TypedDict(
    '_Note_RelevanceInner',
    {
        'fields': 'List[NoteScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Note_RelevanceOrderByInput = TypedDict(
    '_Note_RelevanceOrderByInput',
    {
        '_relevance': '_Note_RelevanceInner',
    },
    total=True
)

NoteOrderByInput = Union[
    '_Note_id_OrderByInput',
    '_Note_title_OrderByInput',
    '_Note_content_OrderByInput',
    '_Note_user_id_OrderByInput',
    '_Note_created_at_OrderByInput',
    '_Note_updated_at_OrderByInput',
    '_Note_RelevanceOrderByInput',
]



# recursive Note types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

NoteRelationFilter = TypedDict(
    'NoteRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class NoteListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class NoteInclude(TypedDict, total=False):
    """Note relational arguments"""


    

class TaskIncludeFromNote(TypedDict, total=False):
    """Relational arguments for Note"""


class TaskIncludeFromNoteRecursive1(TypedDict, total=False):
    """Relational arguments for Note"""


class TaskIncludeFromNoteRecursive2(TypedDict, total=False):
    """Relational arguments for Note"""


class TaskIncludeFromNoteRecursive3(TypedDict, total=False):
    """Relational arguments for Note"""


class TaskIncludeFromNoteRecursive4(TypedDict, total=False):
    """Relational arguments for Note"""

    

class TaskArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    include: 'TaskIncludeFromTaskRecursive1'


class TaskArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    include: 'TaskIncludeFromTaskRecursive2'


class TaskArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    include: 'TaskIncludeFromTaskRecursive3'


class TaskArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    include: 'TaskIncludeFromTaskRecursive4'


class TaskArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    
    

class FindManyTaskArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive1'


class FindManyTaskArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive2'


class FindManyTaskArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive3'


class FindManyTaskArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive4'


class FindManyTaskArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    
    

class EventIncludeFromNote(TypedDict, total=False):
    """Relational arguments for Note"""


class EventIncludeFromNoteRecursive1(TypedDict, total=False):
    """Relational arguments for Note"""


class EventIncludeFromNoteRecursive2(TypedDict, total=False):
    """Relational arguments for Note"""


class EventIncludeFromNoteRecursive3(TypedDict, total=False):
    """Relational arguments for Note"""


class EventIncludeFromNoteRecursive4(TypedDict, total=False):
    """Relational arguments for Note"""

    

class EventArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    
    

class FindManyEventArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class NoteIncludeFromNote(TypedDict, total=False):
    """Relational arguments for Note"""


class NoteIncludeFromNoteRecursive1(TypedDict, total=False):
    """Relational arguments for Note"""


class NoteIncludeFromNoteRecursive2(TypedDict, total=False):
    """Relational arguments for Note"""


class NoteIncludeFromNoteRecursive3(TypedDict, total=False):
    """Relational arguments for Note"""


class NoteIncludeFromNoteRecursive4(TypedDict, total=False):
    """Relational arguments for Note"""

    

class NoteArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    include: 'NoteIncludeFromNoteRecursive1'


class NoteArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    include: 'NoteIncludeFromNoteRecursive2'


class NoteArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    include: 'NoteIncludeFromNoteRecursive3'


class NoteArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    include: 'NoteIncludeFromNoteRecursive4'


class NoteArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    
    

class FindManyNoteArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive1'


class FindManyNoteArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive2'


class FindManyNoteArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive3'


class FindManyNoteArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive4'


class FindManyNoteArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    
    

class LLMConfigIncludeFromNote(TypedDict, total=False):
    """Relational arguments for Note"""


class LLMConfigIncludeFromNoteRecursive1(TypedDict, total=False):
    """Relational arguments for Note"""


class LLMConfigIncludeFromNoteRecursive2(TypedDict, total=False):
    """Relational arguments for Note"""


class LLMConfigIncludeFromNoteRecursive3(TypedDict, total=False):
    """Relational arguments for Note"""


class LLMConfigIncludeFromNoteRecursive4(TypedDict, total=False):
    """Relational arguments for Note"""

    

class LLMConfigArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive1'


class LLMConfigArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive2'


class LLMConfigArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive3'


class LLMConfigArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive4'


class LLMConfigArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    
    

class FindManyLLMConfigArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive1'


class FindManyLLMConfigArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive2'


class FindManyLLMConfigArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive3'


class FindManyLLMConfigArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive4'


class FindManyLLMConfigArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    


FindManyNoteArgs = FindManyNoteArgsFromNote
FindFirstNoteArgs = FindManyNoteArgsFromNote


    

class NoteWhereInput(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['NoteWhereInputRecursive1', List['NoteWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['NoteWhereInputRecursive1']
    OR: List['NoteWhereInputRecursive1']
    NOT: List['NoteWhereInputRecursive1']


class NoteWhereInputRecursive1(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['NoteWhereInputRecursive2', List['NoteWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['NoteWhereInputRecursive2']
    OR: List['NoteWhereInputRecursive2']
    NOT: List['NoteWhereInputRecursive2']


class NoteWhereInputRecursive2(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['NoteWhereInputRecursive3', List['NoteWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['NoteWhereInputRecursive3']
    OR: List['NoteWhereInputRecursive3']
    NOT: List['NoteWhereInputRecursive3']


class NoteWhereInputRecursive3(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['NoteWhereInputRecursive4', List['NoteWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['NoteWhereInputRecursive4']
    OR: List['NoteWhereInputRecursive4']
    NOT: List['NoteWhereInputRecursive4']


class NoteWhereInputRecursive4(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Note types


    

class NoteScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NoteScalarWhereWithAggregatesInputRecursive1']
    OR: List['NoteScalarWhereWithAggregatesInputRecursive1']
    NOT: List['NoteScalarWhereWithAggregatesInputRecursive1']


class NoteScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NoteScalarWhereWithAggregatesInputRecursive2']
    OR: List['NoteScalarWhereWithAggregatesInputRecursive2']
    NOT: List['NoteScalarWhereWithAggregatesInputRecursive2']


class NoteScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NoteScalarWhereWithAggregatesInputRecursive3']
    OR: List['NoteScalarWhereWithAggregatesInputRecursive3']
    NOT: List['NoteScalarWhereWithAggregatesInputRecursive3']


class NoteScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NoteScalarWhereWithAggregatesInputRecursive4']
    OR: List['NoteScalarWhereWithAggregatesInputRecursive4']
    NOT: List['NoteScalarWhereWithAggregatesInputRecursive4']


class NoteScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class NoteGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    content: _str
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'NoteSumAggregateOutput'
    _avg: 'NoteAvgAggregateOutput'
    _min: 'NoteMinAggregateOutput'
    _max: 'NoteMaxAggregateOutput'
    _count: 'NoteCountAggregateOutput'


class NoteAvgAggregateOutput(TypedDict, total=False):
    """Note output for aggregating averages"""


class NoteSumAggregateOutput(TypedDict, total=False):
    """Note output for aggregating sums"""


class NoteScalarAggregateOutput(TypedDict, total=False):
    """Note output including scalar fields"""
    id: _str
    title: _str
    content: _str
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


NoteMinAggregateOutput = NoteScalarAggregateOutput
NoteMaxAggregateOutput = NoteScalarAggregateOutput


class NoteMaxAggregateInput(TypedDict, total=False):
    """Note input for aggregating by max"""
    id: bool
    title: bool
    content: bool
    user_id: bool
    created_at: bool
    updated_at: bool


class NoteMinAggregateInput(TypedDict, total=False):
    """Note input for aggregating by min"""
    id: bool
    title: bool
    content: bool
    user_id: bool
    created_at: bool
    updated_at: bool


class NoteNumberAggregateInput(TypedDict, total=False):
    """Note input for aggregating numbers"""


NoteAvgAggregateInput = NoteNumberAggregateInput
NoteSumAggregateInput = NoteNumberAggregateInput


NoteCountAggregateInput = TypedDict(
    'NoteCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'content': bool,
        'user_id': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

NoteCountAggregateOutput = TypedDict(
    'NoteCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'content': int,
        'user_id': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


NoteKeys = Literal[
    'id',
    'title',
    'content',
    'user_id',
    'created_at',
    'updated_at',
]
NoteScalarFieldKeys = Literal[
    'id',
    'title',
    'content',
    'user_id',
    'created_at',
    'updated_at',
]
NoteScalarFieldKeysT = TypeVar('NoteScalarFieldKeysT', bound=NoteScalarFieldKeys)

NoteRelationalFieldKeys = _NoneType

# LLMConfig types

class LLMConfigOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the LLMConfig create method"""
    id: _str
    temperature: _float
    max_tokens: Optional[_int]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class LLMConfigCreateInput(LLMConfigOptionalCreateInput):
    """Required arguments to the LLMConfig create method"""
    model_name: _str
    api_key: _str
    user_id: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class LLMConfigOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the LLMConfig create method, without relations"""
    id: _str
    temperature: _float
    max_tokens: Optional[_int]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class LLMConfigCreateWithoutRelationsInput(LLMConfigOptionalCreateWithoutRelationsInput):
    """Required arguments to the LLMConfig create method, without relations"""
    model_name: _str
    api_key: _str
    user_id: _str

class LLMConfigConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'LLMConfigCreateWithoutRelationsInput'
    where: 'LLMConfigWhereUniqueInput'

class LLMConfigCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'LLMConfigCreateWithoutRelationsInput'
    connect: 'LLMConfigWhereUniqueInput'
    connect_or_create: 'LLMConfigConnectOrCreateWithoutRelationsInput'


class LLMConfigCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['LLMConfigCreateWithoutRelationsInput', List['LLMConfigCreateWithoutRelationsInput']]
    connect: Union['LLMConfigWhereUniqueInput', List['LLMConfigWhereUniqueInput']]
    connect_or_create: Union['LLMConfigConnectOrCreateWithoutRelationsInput', List['LLMConfigConnectOrCreateWithoutRelationsInput']]

_LLMConfigWhereUnique_id_Input = TypedDict(
    '_LLMConfigWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

LLMConfigWhereUniqueInput = _LLMConfigWhereUnique_id_Input


class LLMConfigUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    model_name: _str
    api_key: _str
    temperature: Union[AtomicFloatInput, _float]
    max_tokens: Optional[Union[AtomicIntInput, _int]]
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class LLMConfigUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    model_name: _str
    api_key: _str
    temperature: Union[AtomicFloatInput, _float]
    max_tokens: Optional[Union[AtomicIntInput, _int]]
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class LLMConfigUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['LLMConfigCreateWithoutRelationsInput']
    connect: List['LLMConfigWhereUniqueInput']
    connect_or_create: List['LLMConfigConnectOrCreateWithoutRelationsInput']
    set: List['LLMConfigWhereUniqueInput']
    disconnect: List['LLMConfigWhereUniqueInput']
    delete: List['LLMConfigWhereUniqueInput']

    # TODO
    # update: List['LLMConfigUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['LLMConfigUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['LLMConfigScalarWhereInput']
    # upsert: List['LLMConfigUpserteWithWhereUniqueWithoutRelationsInput']


class LLMConfigUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'LLMConfigCreateWithoutRelationsInput'
    connect: 'LLMConfigWhereUniqueInput'
    connect_or_create: 'LLMConfigConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'LLMConfigUpdateInput'
    # upsert: 'LLMConfigUpsertWithoutRelationsInput'


class LLMConfigUpsertInput(TypedDict):
    create: 'LLMConfigCreateInput'
    update: 'LLMConfigUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_LLMConfig_id_OrderByInput = TypedDict(
    '_LLMConfig_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_LLMConfig_model_name_OrderByInput = TypedDict(
    '_LLMConfig_model_name_OrderByInput',
    {
        'model_name': 'SortOrder',
    },
    total=True
)

_LLMConfig_api_key_OrderByInput = TypedDict(
    '_LLMConfig_api_key_OrderByInput',
    {
        'api_key': 'SortOrder',
    },
    total=True
)

_LLMConfig_temperature_OrderByInput = TypedDict(
    '_LLMConfig_temperature_OrderByInput',
    {
        'temperature': 'SortOrder',
    },
    total=True
)

_LLMConfig_max_tokens_OrderByInput = TypedDict(
    '_LLMConfig_max_tokens_OrderByInput',
    {
        'max_tokens': 'SortOrder',
    },
    total=True
)

_LLMConfig_user_id_OrderByInput = TypedDict(
    '_LLMConfig_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_LLMConfig_created_at_OrderByInput = TypedDict(
    '_LLMConfig_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_LLMConfig_updated_at_OrderByInput = TypedDict(
    '_LLMConfig_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_LLMConfig_RelevanceInner = TypedDict(
    '_LLMConfig_RelevanceInner',
    {
        'fields': 'List[LLMConfigScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_LLMConfig_RelevanceOrderByInput = TypedDict(
    '_LLMConfig_RelevanceOrderByInput',
    {
        '_relevance': '_LLMConfig_RelevanceInner',
    },
    total=True
)

LLMConfigOrderByInput = Union[
    '_LLMConfig_id_OrderByInput',
    '_LLMConfig_model_name_OrderByInput',
    '_LLMConfig_api_key_OrderByInput',
    '_LLMConfig_temperature_OrderByInput',
    '_LLMConfig_max_tokens_OrderByInput',
    '_LLMConfig_user_id_OrderByInput',
    '_LLMConfig_created_at_OrderByInput',
    '_LLMConfig_updated_at_OrderByInput',
    '_LLMConfig_RelevanceOrderByInput',
]



# recursive LLMConfig types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

LLMConfigRelationFilter = TypedDict(
    'LLMConfigRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class LLMConfigListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class LLMConfigInclude(TypedDict, total=False):
    """LLMConfig relational arguments"""


    

class TaskIncludeFromLLMConfig(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class TaskIncludeFromLLMConfigRecursive1(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class TaskIncludeFromLLMConfigRecursive2(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class TaskIncludeFromLLMConfigRecursive3(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class TaskIncludeFromLLMConfigRecursive4(TypedDict, total=False):
    """Relational arguments for LLMConfig"""

    

class TaskArgsFromLLMConfig(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'TaskIncludeFromTaskRecursive1'


class TaskArgsFromLLMConfigRecursive1(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'TaskIncludeFromTaskRecursive2'


class TaskArgsFromLLMConfigRecursive2(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'TaskIncludeFromTaskRecursive3'


class TaskArgsFromLLMConfigRecursive3(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'TaskIncludeFromTaskRecursive4'


class TaskArgsFromLLMConfigRecursive4(TypedDict, total=False):
    """Arguments for LLMConfig"""
    
    

class FindManyTaskArgsFromLLMConfig(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive1'


class FindManyTaskArgsFromLLMConfigRecursive1(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive2'


class FindManyTaskArgsFromLLMConfigRecursive2(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive3'


class FindManyTaskArgsFromLLMConfigRecursive3(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    include: 'TaskIncludeFromTaskRecursive4'


class FindManyTaskArgsFromLLMConfigRecursive4(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['TaskOrderByInput', List['TaskOrderByInput']]
    where: 'TaskWhereInput'
    cursor: 'TaskWhereUniqueInput'
    distinct: List['TaskScalarFieldKeys']
    
    

class EventIncludeFromLLMConfig(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class EventIncludeFromLLMConfigRecursive1(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class EventIncludeFromLLMConfigRecursive2(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class EventIncludeFromLLMConfigRecursive3(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class EventIncludeFromLLMConfigRecursive4(TypedDict, total=False):
    """Relational arguments for LLMConfig"""

    

class EventArgsFromLLMConfig(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'EventIncludeFromEventRecursive1'


class EventArgsFromLLMConfigRecursive1(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'EventIncludeFromEventRecursive2'


class EventArgsFromLLMConfigRecursive2(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'EventIncludeFromEventRecursive3'


class EventArgsFromLLMConfigRecursive3(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'EventIncludeFromEventRecursive4'


class EventArgsFromLLMConfigRecursive4(TypedDict, total=False):
    """Arguments for LLMConfig"""
    
    

class FindManyEventArgsFromLLMConfig(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive1'


class FindManyEventArgsFromLLMConfigRecursive1(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive2'


class FindManyEventArgsFromLLMConfigRecursive2(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive3'


class FindManyEventArgsFromLLMConfigRecursive3(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    include: 'EventIncludeFromEventRecursive4'


class FindManyEventArgsFromLLMConfigRecursive4(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['EventOrderByInput', List['EventOrderByInput']]
    where: 'EventWhereInput'
    cursor: 'EventWhereUniqueInput'
    distinct: List['EventScalarFieldKeys']
    
    

class NoteIncludeFromLLMConfig(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class NoteIncludeFromLLMConfigRecursive1(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class NoteIncludeFromLLMConfigRecursive2(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class NoteIncludeFromLLMConfigRecursive3(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class NoteIncludeFromLLMConfigRecursive4(TypedDict, total=False):
    """Relational arguments for LLMConfig"""

    

class NoteArgsFromLLMConfig(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'NoteIncludeFromNoteRecursive1'


class NoteArgsFromLLMConfigRecursive1(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'NoteIncludeFromNoteRecursive2'


class NoteArgsFromLLMConfigRecursive2(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'NoteIncludeFromNoteRecursive3'


class NoteArgsFromLLMConfigRecursive3(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'NoteIncludeFromNoteRecursive4'


class NoteArgsFromLLMConfigRecursive4(TypedDict, total=False):
    """Arguments for LLMConfig"""
    
    

class FindManyNoteArgsFromLLMConfig(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive1'


class FindManyNoteArgsFromLLMConfigRecursive1(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive2'


class FindManyNoteArgsFromLLMConfigRecursive2(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive3'


class FindManyNoteArgsFromLLMConfigRecursive3(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive4'


class FindManyNoteArgsFromLLMConfigRecursive4(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    
    

class LLMConfigIncludeFromLLMConfig(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class LLMConfigIncludeFromLLMConfigRecursive1(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class LLMConfigIncludeFromLLMConfigRecursive2(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class LLMConfigIncludeFromLLMConfigRecursive3(TypedDict, total=False):
    """Relational arguments for LLMConfig"""


class LLMConfigIncludeFromLLMConfigRecursive4(TypedDict, total=False):
    """Relational arguments for LLMConfig"""

    

class LLMConfigArgsFromLLMConfig(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive1'


class LLMConfigArgsFromLLMConfigRecursive1(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive2'


class LLMConfigArgsFromLLMConfigRecursive2(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive3'


class LLMConfigArgsFromLLMConfigRecursive3(TypedDict, total=False):
    """Arguments for LLMConfig"""
    include: 'LLMConfigIncludeFromLLMConfigRecursive4'


class LLMConfigArgsFromLLMConfigRecursive4(TypedDict, total=False):
    """Arguments for LLMConfig"""
    
    

class FindManyLLMConfigArgsFromLLMConfig(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive1'


class FindManyLLMConfigArgsFromLLMConfigRecursive1(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive2'


class FindManyLLMConfigArgsFromLLMConfigRecursive2(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive3'


class FindManyLLMConfigArgsFromLLMConfigRecursive3(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    include: 'LLMConfigIncludeFromLLMConfigRecursive4'


class FindManyLLMConfigArgsFromLLMConfigRecursive4(TypedDict, total=False):
    """Arguments for LLMConfig"""
    take: int
    skip: int
    order_by: Union['LLMConfigOrderByInput', List['LLMConfigOrderByInput']]
    where: 'LLMConfigWhereInput'
    cursor: 'LLMConfigWhereUniqueInput'
    distinct: List['LLMConfigScalarFieldKeys']
    


FindManyLLMConfigArgs = FindManyLLMConfigArgsFromLLMConfig
FindFirstLLMConfigArgs = FindManyLLMConfigArgsFromLLMConfig


    

class LLMConfigWhereInput(TypedDict, total=False):
    """LLMConfig arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model_name: Union[_str, 'types.StringFilter']
    api_key: Union[_str, 'types.StringFilter']
    temperature: Union[_float, 'types.FloatFilter']
    max_tokens: Union[None, _int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LLMConfigWhereInputRecursive1', List['LLMConfigWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['LLMConfigWhereInputRecursive1']
    OR: List['LLMConfigWhereInputRecursive1']
    NOT: List['LLMConfigWhereInputRecursive1']


class LLMConfigWhereInputRecursive1(TypedDict, total=False):
    """LLMConfig arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model_name: Union[_str, 'types.StringFilter']
    api_key: Union[_str, 'types.StringFilter']
    temperature: Union[_float, 'types.FloatFilter']
    max_tokens: Union[None, _int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LLMConfigWhereInputRecursive2', List['LLMConfigWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['LLMConfigWhereInputRecursive2']
    OR: List['LLMConfigWhereInputRecursive2']
    NOT: List['LLMConfigWhereInputRecursive2']


class LLMConfigWhereInputRecursive2(TypedDict, total=False):
    """LLMConfig arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model_name: Union[_str, 'types.StringFilter']
    api_key: Union[_str, 'types.StringFilter']
    temperature: Union[_float, 'types.FloatFilter']
    max_tokens: Union[None, _int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LLMConfigWhereInputRecursive3', List['LLMConfigWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['LLMConfigWhereInputRecursive3']
    OR: List['LLMConfigWhereInputRecursive3']
    NOT: List['LLMConfigWhereInputRecursive3']


class LLMConfigWhereInputRecursive3(TypedDict, total=False):
    """LLMConfig arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model_name: Union[_str, 'types.StringFilter']
    api_key: Union[_str, 'types.StringFilter']
    temperature: Union[_float, 'types.FloatFilter']
    max_tokens: Union[None, _int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LLMConfigWhereInputRecursive4', List['LLMConfigWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['LLMConfigWhereInputRecursive4']
    OR: List['LLMConfigWhereInputRecursive4']
    NOT: List['LLMConfigWhereInputRecursive4']


class LLMConfigWhereInputRecursive4(TypedDict, total=False):
    """LLMConfig arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model_name: Union[_str, 'types.StringFilter']
    api_key: Union[_str, 'types.StringFilter']
    temperature: Union[_float, 'types.FloatFilter']
    max_tokens: Union[None, _int, 'types.IntFilter']
    user_id: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate LLMConfig types


    

class LLMConfigScalarWhereWithAggregatesInput(TypedDict, total=False):
    """LLMConfig arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model_name: Union[_str, 'types.StringWithAggregatesFilter']
    api_key: Union[_str, 'types.StringWithAggregatesFilter']
    temperature: Union[_float, 'types.FloatWithAggregatesFilter']
    max_tokens: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LLMConfigScalarWhereWithAggregatesInputRecursive1']
    OR: List['LLMConfigScalarWhereWithAggregatesInputRecursive1']
    NOT: List['LLMConfigScalarWhereWithAggregatesInputRecursive1']


class LLMConfigScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """LLMConfig arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model_name: Union[_str, 'types.StringWithAggregatesFilter']
    api_key: Union[_str, 'types.StringWithAggregatesFilter']
    temperature: Union[_float, 'types.FloatWithAggregatesFilter']
    max_tokens: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LLMConfigScalarWhereWithAggregatesInputRecursive2']
    OR: List['LLMConfigScalarWhereWithAggregatesInputRecursive2']
    NOT: List['LLMConfigScalarWhereWithAggregatesInputRecursive2']


class LLMConfigScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """LLMConfig arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model_name: Union[_str, 'types.StringWithAggregatesFilter']
    api_key: Union[_str, 'types.StringWithAggregatesFilter']
    temperature: Union[_float, 'types.FloatWithAggregatesFilter']
    max_tokens: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LLMConfigScalarWhereWithAggregatesInputRecursive3']
    OR: List['LLMConfigScalarWhereWithAggregatesInputRecursive3']
    NOT: List['LLMConfigScalarWhereWithAggregatesInputRecursive3']


class LLMConfigScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """LLMConfig arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model_name: Union[_str, 'types.StringWithAggregatesFilter']
    api_key: Union[_str, 'types.StringWithAggregatesFilter']
    temperature: Union[_float, 'types.FloatWithAggregatesFilter']
    max_tokens: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LLMConfigScalarWhereWithAggregatesInputRecursive4']
    OR: List['LLMConfigScalarWhereWithAggregatesInputRecursive4']
    NOT: List['LLMConfigScalarWhereWithAggregatesInputRecursive4']


class LLMConfigScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """LLMConfig arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model_name: Union[_str, 'types.StringWithAggregatesFilter']
    api_key: Union[_str, 'types.StringWithAggregatesFilter']
    temperature: Union[_float, 'types.FloatWithAggregatesFilter']
    max_tokens: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class LLMConfigGroupByOutput(TypedDict, total=False):
    id: _str
    model_name: _str
    api_key: _str
    temperature: _float
    max_tokens: _int
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'LLMConfigSumAggregateOutput'
    _avg: 'LLMConfigAvgAggregateOutput'
    _min: 'LLMConfigMinAggregateOutput'
    _max: 'LLMConfigMaxAggregateOutput'
    _count: 'LLMConfigCountAggregateOutput'


class LLMConfigAvgAggregateOutput(TypedDict, total=False):
    """LLMConfig output for aggregating averages"""
    temperature: float
    max_tokens: float


class LLMConfigSumAggregateOutput(TypedDict, total=False):
    """LLMConfig output for aggregating sums"""
    temperature: _float
    max_tokens: _int


class LLMConfigScalarAggregateOutput(TypedDict, total=False):
    """LLMConfig output including scalar fields"""
    id: _str
    model_name: _str
    api_key: _str
    temperature: _float
    max_tokens: _int
    user_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


LLMConfigMinAggregateOutput = LLMConfigScalarAggregateOutput
LLMConfigMaxAggregateOutput = LLMConfigScalarAggregateOutput


class LLMConfigMaxAggregateInput(TypedDict, total=False):
    """LLMConfig input for aggregating by max"""
    id: bool
    model_name: bool
    api_key: bool
    temperature: bool
    max_tokens: bool
    user_id: bool
    created_at: bool
    updated_at: bool


class LLMConfigMinAggregateInput(TypedDict, total=False):
    """LLMConfig input for aggregating by min"""
    id: bool
    model_name: bool
    api_key: bool
    temperature: bool
    max_tokens: bool
    user_id: bool
    created_at: bool
    updated_at: bool


class LLMConfigNumberAggregateInput(TypedDict, total=False):
    """LLMConfig input for aggregating numbers"""
    temperature: bool
    max_tokens: bool


LLMConfigAvgAggregateInput = LLMConfigNumberAggregateInput
LLMConfigSumAggregateInput = LLMConfigNumberAggregateInput


LLMConfigCountAggregateInput = TypedDict(
    'LLMConfigCountAggregateInput',
    {
        'id': bool,
        'model_name': bool,
        'api_key': bool,
        'temperature': bool,
        'max_tokens': bool,
        'user_id': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

LLMConfigCountAggregateOutput = TypedDict(
    'LLMConfigCountAggregateOutput',
    {
        'id': int,
        'model_name': int,
        'api_key': int,
        'temperature': int,
        'max_tokens': int,
        'user_id': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


LLMConfigKeys = Literal[
    'id',
    'model_name',
    'api_key',
    'temperature',
    'max_tokens',
    'user_id',
    'created_at',
    'updated_at',
]
LLMConfigScalarFieldKeys = Literal[
    'id',
    'model_name',
    'api_key',
    'temperature',
    'max_tokens',
    'user_id',
    'created_at',
    'updated_at',
]
LLMConfigScalarFieldKeysT = TypeVar('LLMConfigScalarFieldKeysT', bound=LLMConfigScalarFieldKeys)

LLMConfigRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields